name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r road_risk_game/requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        cd road_risk_game
        pytest tests/ -v --cov=utils --cov-report=xml --cov-report=term
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./road_risk_game/coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install linting tools
      run: |
        pip install flake8 black isort
        
    - name: Run Black (formatting check)
      run: |
        black --check road_risk_game/ --exclude='venv|.git|__pycache__'
      continue-on-error: true
        
    - name: Run isort (import sorting check)
      run: |
        isort --check-only road_risk_game/ --skip venv --skip .git --skip __pycache__
      continue-on-error: true
        
    - name: Run Flake8 (linting)
      run: |
        flake8 road_risk_game/ --exclude=venv,.git,__pycache__ --max-line-length=100 --ignore=E203,W503
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run Bandit (security vulnerabilities)
      run: |
        bandit -r road_risk_game/ -ll -i -x venv,__pycache__
      continue-on-error: true
        
    - name: Check dependencies for vulnerabilities
      run: |
        pip install -r road_risk_game/requirements.txt
        safety check --json || true
      continue-on-error: true

  validate-model:
    name: Validate ML Model
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install -r road_risk_game/requirements.txt
        
    - name: Verify model files exist
      run: |
        ls -la road_risk_game/models/
        test -f road_risk_game/models/accident_risk_model.joblib
        test -f road_risk_game/models/label_encoders.joblib
        test -f road_risk_game/models/feature_names.joblib
        
    - name: Test model loading
      run: |
        cd road_risk_game
        python -c "
        from utils.model_utils import RiskPredictor
        predictor = RiskPredictor(models_dir='models')
        print('âœ… Model loaded successfully!')
        print(f'Model type: {type(predictor.model).__name__}')
        print(f'Feature count: {len(predictor.feature_names)}')
        "

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test, lint, security, validate-model]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Comment PR with deployment info
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `âœ… All checks passed! 
            
            ðŸš€ Ready to deploy to Streamlit Cloud.
            
            **Test Results:**
            - âœ… Unit Tests Passed
            - âœ… Linting Passed
            - âœ… Security Scan Passed
            - âœ… Model Validation Passed
            
            **Next Steps:**
            - Merge this PR to deploy automatically to production
            - Or visit [Streamlit Cloud](https://share.streamlit.io) to deploy manually
            `
          })

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [test, lint, security, validate-model]
    if: success() && github.event_name == 'push'
    
    steps:
    - name: Success notification
      run: |
        echo "ðŸŽ‰ All CI checks passed successfully!"
        echo "âœ… Tests: Passed"
        echo "âœ… Linting: Passed"
        echo "âœ… Security: Passed"
        echo "âœ… Model Validation: Passed"
        echo ""
        echo "ðŸ“¦ Build is ready for deployment!"
